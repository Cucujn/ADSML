package ADSML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Contract_Constraints extends BaseConstraintsDescriptor {
  public Contract_Constraints() {
    super(CONCEPTS.Contract$hy);
  }

  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.attachTo$7eJY, this) {};
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Contract$hy = MetaAdapterFactory.getConcept(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x45527978d0368583L, "ADSML.structure.Contract");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink attachTo$7eJY = MetaAdapterFactory.getReferenceLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x45527978d0368583L, 0x45527978d0368586L, "attachTo");
  }
}
