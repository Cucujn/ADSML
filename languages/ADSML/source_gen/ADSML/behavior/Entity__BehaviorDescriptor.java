package ADSML.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.awt.Graphics2D;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.awt.BasicStroke;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.awt.Color;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Ellipse2D;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public final class Entity__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x1d7a144c8e374fedL, "ADSML.structure.Entity");

  public static final SMethod<Float> charWidth_idERUwC67MER = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("charWidth").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ERUwC67MER").build();
  public static final SMethod<Float> width_id6AbU81lr6Y4 = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("width").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lr6Y4").build();
  public static final SMethod<Float> length_id6AbU81lr6YX = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("length").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lr6YX").build();
  public static final SMethod<Float> headSize_id6AbU81lraTA = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("headSize").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lraTA").build();
  public static final SMethod<Void> draw_id6AbU81lbYnz = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("draw").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lbYnz").build(SMethodBuilder.createJavaParameter(Graphics2D.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(charWidth_idERUwC67MER, width_id6AbU81lr6Y4, length_id6AbU81lr6YX, headSize_id6AbU81lraTA, draw_id6AbU81lbYnz);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static float charWidth_idERUwC67MER(@NotNull SNode __thisNode__) {
    return 8;
  }
  /*package*/ static void draw_id6AbU81lbYnz(@NotNull SNode __thisNode__, Graphics2D g2d) {
    BasicStroke stroke = new BasicStroke(1);
    g2d.setStroke(stroke);

    float x = Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.location$WANK), LINKS.x$ANhB), PROPS.value$oKYE));
    float y = Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.location$WANK), LINKS.y$ANi_), PROPS.value$oKYE));
    // TODO the entity relativeTo maybe a relavtive location.So it need to recurs 
    {
      final SNode location = SLinkOperations.getTarget(__thisNode__, LINKS.location$WANK);
      if (SNodeOperations.isInstanceOf(location, CONCEPTS.RelativeLocation$qF)) {
        x = x + Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(location, LINKS.relativeTo$OqHY), LINKS.location$WANK), LINKS.x$ANhB), PROPS.value$oKYE));
        y = y + Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(location, LINKS.relativeTo$OqHY), LINKS.location$WANK), LINKS.y$ANi_), PROPS.value$oKYE));
      }
    }

    // 实体朝向角度 
    float rotation = Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(__thisNode__, LINKS.rotation$pXNQ), PROPS.value$oKYE));
    g2d.rotate(rotation / 180.0 * Math.PI, x * 10, y * 10);

    // 绘制实体主题 
    g2d.setColor(Color.GREEN);
    float width = ((float) Entity__BehaviorDescriptor.width_id6AbU81lr6Y4.invoke(__thisNode__));
    float length = ((float) Entity__BehaviorDescriptor.length_id6AbU81lr6YX.invoke(__thisNode__));
    float x_ = x - width / 2;
    float y_ = y - length / 2;
    Rectangle2D rectangle = new Rectangle2D.Float(x_ * 10, y_ * 10, width * 10, length * 10);
    g2d.fill(rectangle);

    // 绘制实体name 
    g2d.setColor(Color.BLACK);
    float nameX = x * 10 - SPropertyOperations.getString(__thisNode__, PROPS.name$tAp1).length() / 2 * ((float) Entity__BehaviorDescriptor.charWidth_idERUwC67MER.invoke(__thisNode__));
    float nameY = y * 10 + 30;
    g2d.drawString(SPropertyOperations.getString(__thisNode__, PROPS.name$tAp1), nameX, nameY);

    // 绘制实头部head 
    Rectangle2D rectangleHead = new Rectangle2D.Float(x_ * 10, y_ * 10, width * 10, (float) ((float) Entity__BehaviorDescriptor.headSize_id6AbU81lraTA.invoke(__thisNode__)) * 10);
    g2d.setColor(Color.RED);
    g2d.fill(rectangleHead);

    // 绘制旋转恢正常角度 
    g2d.rotate(rotation / -180.0 * Math.PI, x * 10, y * 10);

    // 绘制实体目标位置 
    if (SLinkOperations.getTarget(__thisNode__, LINKS.goal$arWL) != null) {
      g2d.setColor(Color.WHITE);
      float goalX = Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.goal$arWL), LINKS.x$ANhB), PROPS.value$oKYE)) * 10;
      float goalY = Float.parseFloat(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(__thisNode__, LINKS.goal$arWL), LINKS.y$ANi_), PROPS.value$oKYE)) * 10;
      Ellipse2D ellipse = new Ellipse2D.Float(goalX - 10, goalY - 10, 20, 20);
      g2d.fill(ellipse);
      g2d.setColor(Color.RED);
      ellipse = new Ellipse2D.Float(goalX - 6, goalY - 6, 12, 12);
      g2d.fill(ellipse);

      // 绘制实体目标提示 
      g2d.setColor(Color.BLACK);
      float goalTextX = goalX - SPropertyOperations.getString(__thisNode__, PROPS.name$tAp1).length() / 2 * ((float) Entity__BehaviorDescriptor.charWidth_idERUwC67MER.invoke(__thisNode__));
      float goalTextY = goalY + 20;
      g2d.drawString(SPropertyOperations.getString(__thisNode__, PROPS.name$tAp1), goalTextX, goalTextY);

    }

  }

  /*package*/ Entity__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Float) charWidth_idERUwC67MER(node));
      case 4:
        draw_id6AbU81lbYnz(node, (Graphics2D) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink location$WANK = MetaAdapterFactory.getContainmentLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x1d7a144c8e374fedL, 0x6de5a419acf85908L, "location");
    /*package*/ static final SContainmentLink x$ANhB = MetaAdapterFactory.getContainmentLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0xe6ed7bbc3f3dddeL, 0xe6ed7bbc3f9f187L, "x");
    /*package*/ static final SContainmentLink y$ANi_ = MetaAdapterFactory.getContainmentLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0xe6ed7bbc3f3dddeL, 0xe6ed7bbc3f9f189L, "y");
    /*package*/ static final SReferenceLink relativeTo$OqHY = MetaAdapterFactory.getReferenceLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0xe6ed7bbc3f1a366L, 0xe6ed7bbc40114f7L, "relativeTo");
    /*package*/ static final SContainmentLink rotation$pXNQ = MetaAdapterFactory.getContainmentLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x1d7a144c8e374fedL, 0x6de5a419acf7939cL, "rotation");
    /*package*/ static final SContainmentLink goal$arWL = MetaAdapterFactory.getContainmentLink(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x1d7a144c8e374fedL, 0xab7ea0a06256bf1L, "goal");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$oKYE = MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102cb19a434L, 0x103245d193fL, "value");
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RelativeLocation$qF = MetaAdapterFactory.getConcept(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0xe6ed7bbc3f1a366L, "ADSML.structure.RelativeLocation");
  }
}
