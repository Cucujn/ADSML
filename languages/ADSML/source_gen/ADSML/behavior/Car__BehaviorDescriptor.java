package ADSML.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Car__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0x698be8805526ef86L, "ADSML.structure.Car");

  public static final SMethod<Float> width_id6AbU81lr6Y4 = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("width").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lr6Y4").build();
  public static final SMethod<Float> length_id6AbU81lr6YX = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("length").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lr6YX").build();
  public static final SMethod<Float> headSize_id6AbU81lraTA = new SMethodBuilder<Float>(new SJavaCompoundTypeImpl(Float.TYPE)).name("headSize").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6AbU81lraTA").build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(width_id6AbU81lr6Y4, length_id6AbU81lr6YX, headSize_id6AbU81lraTA);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static float width_id6AbU81lr6Y4(@NotNull SNode __thisNode__) {
    return (float) 1.6;
  }
  /*package*/ static float length_id6AbU81lr6YX(@NotNull SNode __thisNode__) {
    return (float) 3.8;
  }
  /*package*/ static float headSize_id6AbU81lraTA(@NotNull SNode __thisNode__) {
    return (float) 0.7;
  }

  /*package*/ Car__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Float) width_id6AbU81lr6Y4(node));
      case 1:
        return (T) ((Float) length_id6AbU81lr6YX(node));
      case 2:
        return (T) ((Float) headSize_id6AbU81lraTA(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
