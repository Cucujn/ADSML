package ADSML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbsoluteLocation;
  private ConceptPresentation props_Bike;
  private ConceptPresentation props_Car;
  private ConceptPresentation props_CenterLine;
  private ConceptPresentation props_Contract;
  private ConceptPresentation props_ContractEvent;
  private ConceptPresentation props_ContractList;
  private ConceptPresentation props_Entity;
  private ConceptPresentation props_IElement;
  private ConceptPresentation props_Location;
  private ConceptPresentation props_Map;
  private ConceptPresentation props_MotorBike;
  private ConceptPresentation props_Pedestrian;
  private ConceptPresentation props_Point;
  private ConceptPresentation props_RelativeLocation;
  private ConceptPresentation props_Road;
  private ConceptPresentation props_RoadNetwork;
  private ConceptPresentation props_Rule;
  private ConceptPresentation props_Scenario;
  private ConceptPresentation props_ScenarioWithContract;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_TrafficLight;
  private ConceptPresentation props_TrafficSign;
  private ConceptPresentation props_Vehicle;
  private ConceptPresentation props_Weather;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbsoluteLocation:
        if (props_AbsoluteLocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AbsoluteLocation");
          props_AbsoluteLocation = cpb.create();
        }
        return props_AbsoluteLocation;
      case LanguageConceptSwitch.Bike:
        if (props_Bike == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Bike = cpb.create();
        }
        return props_Bike;
      case LanguageConceptSwitch.Car:
        if (props_Car == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Car = cpb.create();
        }
        return props_Car;
      case LanguageConceptSwitch.CenterLine:
        if (props_CenterLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CenterLine = cpb.create();
        }
        return props_CenterLine;
      case LanguageConceptSwitch.Contract:
        if (props_Contract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Contract = cpb.create();
        }
        return props_Contract;
      case LanguageConceptSwitch.ContractEvent:
        if (props_ContractEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ContractEvent");
          props_ContractEvent = cpb.create();
        }
        return props_ContractEvent;
      case LanguageConceptSwitch.ContractList:
        if (props_ContractList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("contract list");
          props_ContractList = cpb.create();
        }
        return props_ContractList;
      case LanguageConceptSwitch.Entity:
        if (props_Entity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Entity = cpb.create();
        }
        return props_Entity;
      case LanguageConceptSwitch.IElement:
        if (props_IElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IElement = cpb.create();
        }
        return props_IElement;
      case LanguageConceptSwitch.Location:
        if (props_Location == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Location = cpb.create();
        }
        return props_Location;
      case LanguageConceptSwitch.Map:
        if (props_Map == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("map");
          props_Map = cpb.create();
        }
        return props_Map;
      case LanguageConceptSwitch.MotorBike:
        if (props_MotorBike == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MotorBike = cpb.create();
        }
        return props_MotorBike;
      case LanguageConceptSwitch.Pedestrian:
        if (props_Pedestrian == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Pedestrian = cpb.create();
        }
        return props_Pedestrian;
      case LanguageConceptSwitch.Point:
        if (props_Point == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Point = cpb.create();
        }
        return props_Point;
      case LanguageConceptSwitch.RelativeLocation:
        if (props_RelativeLocation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x703f16c8997b4d66L, 0x9edc3367cac7e880L, 0xe6ed7bbc3f1a366L, 0xe6ed7bbc40114f7L, "relativeTo", "", "");
          props_RelativeLocation = cpb.create();
        }
        return props_RelativeLocation;
      case LanguageConceptSwitch.Road:
        if (props_Road == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Road = cpb.create();
        }
        return props_Road;
      case LanguageConceptSwitch.RoadNetwork:
        if (props_RoadNetwork == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RoadNetwork = cpb.create();
        }
        return props_RoadNetwork;
      case LanguageConceptSwitch.Rule:
        if (props_Rule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Rule");
          props_Rule = cpb.create();
        }
        return props_Rule;
      case LanguageConceptSwitch.Scenario:
        if (props_Scenario == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Scenario = cpb.create();
        }
        return props_Scenario;
      case LanguageConceptSwitch.ScenarioWithContract:
        if (props_ScenarioWithContract == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ScenarioWithContract = cpb.create();
        }
        return props_ScenarioWithContract;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Statement");
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.TrafficLight:
        if (props_TrafficLight == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TrafficLight = cpb.create();
        }
        return props_TrafficLight;
      case LanguageConceptSwitch.TrafficSign:
        if (props_TrafficSign == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TrafficSign = cpb.create();
        }
        return props_TrafficSign;
      case LanguageConceptSwitch.Vehicle:
        if (props_Vehicle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Vehicle = cpb.create();
        }
        return props_Vehicle;
      case LanguageConceptSwitch.Weather:
        if (props_Weather == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Weather = cpb.create();
        }
        return props_Weather;
    }
    return null;
  }
}
